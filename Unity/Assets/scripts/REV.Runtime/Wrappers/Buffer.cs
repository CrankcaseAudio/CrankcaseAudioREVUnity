/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CrankcaseAudio.Wrappers {

using System;
using System.Runtime.InteropServices;

public partial class Buffer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Buffer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Buffer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Buffer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CrankcaseAudioPINVOKE.delete_Buffer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Buffer() : this(CrankcaseAudioPINVOKE.new_Buffer__SWIG_0(), true) {
  }

  public void Init() {
    CrankcaseAudioPINVOKE.Buffer_Init__SWIG_0(swigCPtr);
  }

  public int GetNumberOfSamplesInChannel() {
    int ret = CrankcaseAudioPINVOKE.Buffer_GetNumberOfSamplesInChannel(swigCPtr);
    return ret;
  }

  public int GetNumberOfSamplesRemaining() {
    int ret = CrankcaseAudioPINVOKE.Buffer_GetNumberOfSamplesRemaining(swigCPtr);
    return ret;
  }

  public int GetNumberOfSamplesWritten() {
    int ret = CrankcaseAudioPINVOKE.Buffer_GetNumberOfSamplesWritten(swigCPtr);
    return ret;
  }

  public int GetChannels() {
    int ret = CrankcaseAudioPINVOKE.Buffer_GetChannels(swigCPtr);
    return ret;
  }

  public void Init(int Channels, SWIGTYPE_p_float _pBuffer, int sizeOfBufferInFloats) {
    CrankcaseAudioPINVOKE.Buffer_Init__SWIG_1(swigCPtr, Channels, SWIGTYPE_p_float.getCPtr(_pBuffer), sizeOfBufferInFloats);
  }

  public Buffer(Buffer other, int offsetInFloats, int sizeOfBufferInFloats) : this(CrankcaseAudioPINVOKE.new_Buffer__SWIG_1(Buffer.getCPtr(other), offsetInFloats, sizeOfBufferInFloats), true) {
    if (CrankcaseAudioPINVOKE.SWIGPendingException.Pending) throw CrankcaseAudioPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Write(int channel, float value) {
    CrankcaseAudioPINVOKE.Buffer_Write(swigCPtr, channel, value);
  }

  public void MergeWrite(int channel, float value) {
    CrankcaseAudioPINVOKE.Buffer_MergeWrite(swigCPtr, channel, value);
  }

  public void MoveWritePointer(int offset) {
    CrankcaseAudioPINVOKE.Buffer_MoveWritePointer(swigCPtr, offset);
  }

  public float Peek(int channel) {
    float ret = CrankcaseAudioPINVOKE.Buffer_Peek(swigCPtr, channel);
    return ret;
  }

  public float Read(int channel) {
    float ret = CrankcaseAudioPINVOKE.Buffer_Read__SWIG_0(swigCPtr, channel);
    return ret;
  }

  public float Read(int channel, int index) {
    float ret = CrankcaseAudioPINVOKE.Buffer_Read__SWIG_1(swigCPtr, channel, index);
    return ret;
  }

  public void Merge(Buffer otherBuffer, int count) {
    CrankcaseAudioPINVOKE.Buffer_Merge(swigCPtr, Buffer.getCPtr(otherBuffer), count);
    if (CrankcaseAudioPINVOKE.SWIGPendingException.Pending) throw CrankcaseAudioPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Push() {
    CrankcaseAudioPINVOKE.Buffer_Push(swigCPtr);
  }

  public int Pop() {
    int ret = CrankcaseAudioPINVOKE.Buffer_Pop(swigCPtr);
    return ret;
  }

  public void Reset() {
    CrankcaseAudioPINVOKE.Buffer_Reset(swigCPtr);
  }

  public void Clear() {
    CrankcaseAudioPINVOKE.Buffer_Clear(swigCPtr);
  }

}

}
