/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CrankcaseAudio.Wrappers {

using System;
using System.Runtime.InteropServices;

public partial class IREVPlayer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IREVPlayer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IREVPlayer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IREVPlayer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CrankcaseAudioPINVOKE.delete_IREVPlayer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static int VERSION {
    set {
      CrankcaseAudioPINVOKE.IREVPlayer_VERSION_set(value);
    } 
    get {
      int ret = CrankcaseAudioPINVOKE.IREVPlayer_VERSION_get();
      return ret;
    } 
  }

  public static int getMemoryFootprint() {
    int ret = CrankcaseAudioPINVOKE.IREVPlayer_getMemoryFootprint();
    return ret;
  }

  public static IREVPlayer construct(SWIGTYPE_p_void memory, int size) {
    IntPtr cPtr = CrankcaseAudioPINVOKE.IREVPlayer_construct(SWIGTYPE_p_void.getCPtr(memory), size);
    IREVPlayer ret = (cPtr == IntPtr.Zero) ? null : new IREVPlayer(cPtr, false);
    return ret;
  }

  public virtual void LoadData(SWIGTYPE_p_void modelHandle) {
    CrankcaseAudioPINVOKE.IREVPlayer_LoadData(swigCPtr, SWIGTYPE_p_void.getCPtr(modelHandle));
  }

  public virtual void Rebase(SWIGTYPE_p_void modelHandle) {
    CrankcaseAudioPINVOKE.IREVPlayer_Rebase(swigCPtr, SWIGTYPE_p_void.getCPtr(modelHandle));
  }

  public virtual void Update(REVPlayerUpdateParams updateParams, float deltaTimeSec) {
    CrankcaseAudioPINVOKE.IREVPlayer_Update(swigCPtr, REVPlayerUpdateParams.getCPtr(updateParams), deltaTimeSec);
    if (CrankcaseAudioPINVOKE.SWIGPendingException.Pending) throw CrankcaseAudioPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WriteBuffer(Buffer buffer) {
    CrankcaseAudioPINVOKE.IREVPlayer_WriteBuffer(swigCPtr, Buffer.getCPtr(buffer));
    if (CrankcaseAudioPINVOKE.SWIGPendingException.Pending) throw CrankcaseAudioPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float Reset(REVPlayerUpdateParams updateParams, float deltaTimeSec) {
    float ret = CrankcaseAudioPINVOKE.IREVPlayer_Reset(swigCPtr, REVPlayerUpdateParams.getCPtr(updateParams), deltaTimeSec);
    if (CrankcaseAudioPINVOKE.SWIGPendingException.Pending) throw CrankcaseAudioPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getNumberChannels() {
    int ret = CrankcaseAudioPINVOKE.IREVPlayer_getNumberChannels(swigCPtr);
    return ret;
  }

  public virtual float getSampleRate() {
    float ret = CrankcaseAudioPINVOKE.IREVPlayer_getSampleRate(swigCPtr);
    return ret;
  }

  public virtual float getVisualRPM() {
    float ret = CrankcaseAudioPINVOKE.IREVPlayer_getVisualRPM(swigCPtr);
    return ret;
  }

  public virtual float getLoad() {
    float ret = CrankcaseAudioPINVOKE.IREVPlayer_getLoad(swigCPtr);
    return ret;
  }

  public virtual float getRPMSmoothness() {
    float ret = CrankcaseAudioPINVOKE.IREVPlayer_getRPMSmoothness(swigCPtr);
    return ret;
  }

  public virtual void setRPMSmoothness(float value) {
    CrankcaseAudioPINVOKE.IREVPlayer_setRPMSmoothness(swigCPtr, value);
  }

  public virtual SWIGTYPE_p_void getModelFileHandle() {
    IntPtr cPtr = CrankcaseAudioPINVOKE.IREVPlayer_getModelFileHandle(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

}

}
