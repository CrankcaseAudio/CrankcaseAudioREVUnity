#if !UNITY_IPHONE || UNITY_EDITOR
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CrankcaseAudio.Wrappers {

using System;
using System.Runtime.InteropServices;

class CrankcaseAudioPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("REVRuntime", EntryPoint="SWIGRegisterExceptionCallbacks_CrankcaseAudio")]
    public static extern void SWIGRegisterExceptionCallbacks_CrankcaseAudio(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("REVRuntime", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_CrankcaseAudio")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_CrankcaseAudio(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_CrankcaseAudio(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_CrankcaseAudio(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(CrankcaseAudioPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(CrankcaseAudioPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("REVRuntime", EntryPoint="SWIGRegisterStringCallback_CrankcaseAudio")]
    public static extern void SWIGRegisterStringCallback_CrankcaseAudio(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_CrankcaseAudio(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static CrankcaseAudioPINVOKE() {
  }


  [DllImport("REVRuntime", EntryPoint="CSharp_new_FloatArray")]
  public static extern IntPtr new_FloatArray(int jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_delete_FloatArray")]
  public static extern void delete_FloatArray(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_FloatArray_getitem")]
  public static extern float FloatArray_getitem(HandleRef jarg1, int jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_FloatArray_setitem")]
  public static extern void FloatArray_setitem(HandleRef jarg1, int jarg2, float jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_FloatArray_cast")]
  public static extern IntPtr FloatArray_cast(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_FloatArray_frompointer")]
  public static extern IntPtr FloatArray_frompointer(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_VERSION_COMPATIBLE_MASK_get")]
  public static extern int VERSION_COMPATIBLE_MASK_get();

  [DllImport("REVRuntime", EntryPoint="CSharp_new_Buffer__SWIG_0")]
  public static extern IntPtr new_Buffer__SWIG_0();

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Init__SWIG_0")]
  public static extern void Buffer_Init__SWIG_0(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_GetNumberOfSamplesInChannel")]
  public static extern int Buffer_GetNumberOfSamplesInChannel(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_GetNumberOfSamplesRemaining")]
  public static extern int Buffer_GetNumberOfSamplesRemaining(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_GetNumberOfSamplesWritten")]
  public static extern int Buffer_GetNumberOfSamplesWritten(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_GetChannels")]
  public static extern int Buffer_GetChannels(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Init__SWIG_1")]
  public static extern void Buffer_Init__SWIG_1(HandleRef jarg1, int jarg2, HandleRef jarg3, int jarg4);

  [DllImport("REVRuntime", EntryPoint="CSharp_new_Buffer__SWIG_1")]
  public static extern IntPtr new_Buffer__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Write")]
  public static extern void Buffer_Write(HandleRef jarg1, int jarg2, float jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_MergeWrite")]
  public static extern void Buffer_MergeWrite(HandleRef jarg1, int jarg2, float jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_MoveWritePointer")]
  public static extern void Buffer_MoveWritePointer(HandleRef jarg1, int jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Peek")]
  public static extern float Buffer_Peek(HandleRef jarg1, int jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Read__SWIG_0")]
  public static extern float Buffer_Read__SWIG_0(HandleRef jarg1, int jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Read__SWIG_1")]
  public static extern float Buffer_Read__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Merge")]
  public static extern void Buffer_Merge(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Push")]
  public static extern void Buffer_Push(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Pop")]
  public static extern int Buffer_Pop(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Reset")]
  public static extern void Buffer_Reset(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_Buffer_Clear")]
  public static extern void Buffer_Clear(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_delete_Buffer")]
  public static extern void delete_Buffer(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_new_REVPlayerUpdateParams")]
  public static extern IntPtr new_REVPlayerUpdateParams();

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Volume_set")]
  public static extern void REVPlayerUpdateParams_Volume_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Volume_get")]
  public static extern float REVPlayerUpdateParams_Volume_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Rpm_set")]
  public static extern void REVPlayerUpdateParams_Rpm_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Rpm_get")]
  public static extern float REVPlayerUpdateParams_Rpm_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Throttle_set")]
  public static extern void REVPlayerUpdateParams_Throttle_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Throttle_get")]
  public static extern float REVPlayerUpdateParams_Throttle_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Gear_set")]
  public static extern void REVPlayerUpdateParams_Gear_set(HandleRef jarg1, int jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Gear_get")]
  public static extern int REVPlayerUpdateParams_Gear_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Velocity_set")]
  public static extern void REVPlayerUpdateParams_Velocity_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Velocity_get")]
  public static extern float REVPlayerUpdateParams_Velocity_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Pitch_set")]
  public static extern void REVPlayerUpdateParams_Pitch_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_Pitch_get")]
  public static extern float REVPlayerUpdateParams_Pitch_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_EnableShifting_set")]
  public static extern void REVPlayerUpdateParams_EnableShifting_set(HandleRef jarg1, bool jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_REVPlayerUpdateParams_EnableShifting_get")]
  public static extern bool REVPlayerUpdateParams_EnableShifting_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_delete_REVPlayerUpdateParams")]
  public static extern void delete_REVPlayerUpdateParams(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_VERSION_set")]
  public static extern void IREVPlayer_VERSION_set(int jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_VERSION_get")]
  public static extern int IREVPlayer_VERSION_get();

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_getMemoryFootprint")]
  public static extern int IREVPlayer_getMemoryFootprint();

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_construct")]
  public static extern IntPtr IREVPlayer_construct(HandleRef jarg1, int jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_LoadData")]
  public static extern void IREVPlayer_LoadData(HandleRef jarg1, HandleRef jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_Rebase")]
  public static extern void IREVPlayer_Rebase(HandleRef jarg1, HandleRef jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_Update")]
  public static extern void IREVPlayer_Update(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_WriteBuffer")]
  public static extern void IREVPlayer_WriteBuffer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_getNumberChannels")]
  public static extern int IREVPlayer_getNumberChannels(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_getSampleRate")]
  public static extern float IREVPlayer_getSampleRate(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_getVisualRPM")]
  public static extern float IREVPlayer_getVisualRPM(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_getLoad")]
  public static extern float IREVPlayer_getLoad(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_getRPMSmoothness")]
  public static extern float IREVPlayer_getRPMSmoothness(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_IREVPlayer_setRPMSmoothness")]
  public static extern void IREVPlayer_setRPMSmoothness(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_delete_IREVPlayer")]
  public static extern void delete_IREVPlayer(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_FixupModel")]
  public static extern bool FixupModel(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_CheckModelHeader")]
  public static extern bool CheckModelHeader(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_GetNumberOfChannels")]
  public static extern int GetNumberOfChannels(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_GetREVPhysicsControlData")]
  public static extern IntPtr GetREVPhysicsControlData(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_KMaxNumberOfGear_get")]
  public static extern int KMaxNumberOfGear_get();

  [DllImport("REVRuntime", EntryPoint="CSharp_new_VehiclePhysicsControlData")]
  public static extern IntPtr new_VehiclePhysicsControlData();

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_SetGearRatio")]
  public static extern void VehiclePhysicsControlData_SetGearRatio(HandleRef jarg1, int jarg2, float jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_GetGearRatio")]
  public static extern float VehiclePhysicsControlData_GetGearRatio(HandleRef jarg1, int jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_EndianStatus_set")]
  public static extern void VehiclePhysicsControlData_EndianStatus_set(HandleRef jarg1, ushort jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_EndianStatus_get")]
  public static extern ushort VehiclePhysicsControlData_EndianStatus_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_Weight_set")]
  public static extern void VehiclePhysicsControlData_Weight_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_Weight_get")]
  public static extern float VehiclePhysicsControlData_Weight_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_EngineTorque_set")]
  public static extern void VehiclePhysicsControlData_EngineTorque_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_EngineTorque_get")]
  public static extern float VehiclePhysicsControlData_EngineTorque_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_BreakingHorsePower_set")]
  public static extern void VehiclePhysicsControlData_BreakingHorsePower_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_BreakingHorsePower_get")]
  public static extern float VehiclePhysicsControlData_BreakingHorsePower_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_GetDataSize")]
  public static extern int VehiclePhysicsControlData_GetDataSize(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_VehiclePhysicsControlData_FixupEndian")]
  public static extern void VehiclePhysicsControlData_FixupEndian(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_delete_VehiclePhysicsControlData")]
  public static extern void delete_VehiclePhysicsControlData(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_new_PhysicsUpdateParams")]
  public static extern IntPtr new_PhysicsUpdateParams();

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsUpdateParams_Throttle_set")]
  public static extern void PhysicsUpdateParams_Throttle_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsUpdateParams_Throttle_get")]
  public static extern float PhysicsUpdateParams_Throttle_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsUpdateParams_Break_set")]
  public static extern void PhysicsUpdateParams_Break_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsUpdateParams_Break_get")]
  public static extern float PhysicsUpdateParams_Break_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_delete_PhysicsUpdateParams")]
  public static extern void delete_PhysicsUpdateParams(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_new_PhysicsOutputParameters")]
  public static extern IntPtr new_PhysicsOutputParameters();

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsOutputParameters_Rpm_set")]
  public static extern void PhysicsOutputParameters_Rpm_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsOutputParameters_Rpm_get")]
  public static extern float PhysicsOutputParameters_Rpm_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsOutputParameters_Throttle_set")]
  public static extern void PhysicsOutputParameters_Throttle_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsOutputParameters_Throttle_get")]
  public static extern float PhysicsOutputParameters_Throttle_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsOutputParameters_Gear_set")]
  public static extern void PhysicsOutputParameters_Gear_set(HandleRef jarg1, int jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsOutputParameters_Gear_get")]
  public static extern int PhysicsOutputParameters_Gear_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsOutputParameters_Velocity_set")]
  public static extern void PhysicsOutputParameters_Velocity_set(HandleRef jarg1, float jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsOutputParameters_Velocity_get")]
  public static extern float PhysicsOutputParameters_Velocity_get(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_delete_PhysicsOutputParameters")]
  public static extern void delete_PhysicsOutputParameters(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_new_PhysicsSimulator")]
  public static extern IntPtr new_PhysicsSimulator();

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsSimulator_Initialize")]
  public static extern void PhysicsSimulator_Initialize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsSimulator_Update")]
  public static extern IntPtr PhysicsSimulator_Update(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsSimulator_GetControlDataPtr")]
  public static extern IntPtr PhysicsSimulator_GetControlDataPtr(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsSimulator_SetControlData")]
  public static extern void PhysicsSimulator_SetControlData(HandleRef jarg1, HandleRef jarg2);

  [DllImport("REVRuntime", EntryPoint="CSharp_PhysicsSimulator_Reset")]
  public static extern void PhysicsSimulator_Reset(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_delete_PhysicsSimulator")]
  public static extern void delete_PhysicsSimulator(HandleRef jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_gREVVersion_set")]
  public static extern void gREVVersion_set(string jarg1);

  [DllImport("REVRuntime", EntryPoint="CSharp_gREVVersion_get")]
  public static extern string gREVVersion_get();
}

}
#else //UNITY_IPHONE && !UNITY_EDITOR
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CrankcaseAudio.Wrappers {

using System;
using System.Runtime.InteropServices;
using AOT;

class CrankcaseAudioPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("__Internal", EntryPoint="SWIGRegisterExceptionCallbacks_CrankcaseAudio")]
    public static extern void SWIGRegisterExceptionCallbacks_CrankcaseAudio(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("__Internal", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_CrankcaseAudio")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_CrankcaseAudio(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);


    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionDelegate))]
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }


    [MonoPInvokeCallback(typeof (ExceptionArgumentDelegate))]
    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof (ExceptionArgumentDelegate))]
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }

    [MonoPInvokeCallback(typeof (ExceptionArgumentDelegate))]
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_CrankcaseAudio(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_CrankcaseAudio(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(CrankcaseAudioPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(CrankcaseAudioPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("__Internal", EntryPoint="SWIGRegisterStringCallback_CrankcaseAudio")]
    public static extern void SWIGRegisterStringCallback_CrankcaseAudio(SWIGStringDelegate stringDelegate);


    [MonoPInvokeCallback(typeof (SWIGStringDelegate))]
    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_CrankcaseAudio(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static CrankcaseAudioPINVOKE() {
  }


  [DllImport("__Internal", EntryPoint="CSharp_new_FloatArray")]
  public static extern IntPtr new_FloatArray(int jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_delete_FloatArray")]
  public static extern void delete_FloatArray(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_FloatArray_getitem")]
  public static extern float FloatArray_getitem(HandleRef jarg1, int jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_FloatArray_setitem")]
  public static extern void FloatArray_setitem(HandleRef jarg1, int jarg2, float jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_FloatArray_cast")]
  public static extern IntPtr FloatArray_cast(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_FloatArray_frompointer")]
  public static extern IntPtr FloatArray_frompointer(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_VERSION_COMPATIBLE_MASK_get")]
  public static extern int VERSION_COMPATIBLE_MASK_get();

  [DllImport("__Internal", EntryPoint="CSharp_new_Buffer__SWIG_0")]
  public static extern IntPtr new_Buffer__SWIG_0();

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Init__SWIG_0")]
  public static extern void Buffer_Init__SWIG_0(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_GetNumberOfSamplesInChannel")]
  public static extern int Buffer_GetNumberOfSamplesInChannel(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_GetNumberOfSamplesRemaining")]
  public static extern int Buffer_GetNumberOfSamplesRemaining(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_GetNumberOfSamplesWritten")]
  public static extern int Buffer_GetNumberOfSamplesWritten(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_GetChannels")]
  public static extern int Buffer_GetChannels(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Init__SWIG_1")]
  public static extern void Buffer_Init__SWIG_1(HandleRef jarg1, int jarg2, HandleRef jarg3, int jarg4);

  [DllImport("__Internal", EntryPoint="CSharp_new_Buffer__SWIG_1")]
  public static extern IntPtr new_Buffer__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Write")]
  public static extern void Buffer_Write(HandleRef jarg1, int jarg2, float jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_MergeWrite")]
  public static extern void Buffer_MergeWrite(HandleRef jarg1, int jarg2, float jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_MoveWritePointer")]
  public static extern void Buffer_MoveWritePointer(HandleRef jarg1, int jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Peek")]
  public static extern float Buffer_Peek(HandleRef jarg1, int jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Read__SWIG_0")]
  public static extern float Buffer_Read__SWIG_0(HandleRef jarg1, int jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Read__SWIG_1")]
  public static extern float Buffer_Read__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Merge")]
  public static extern void Buffer_Merge(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Push")]
  public static extern void Buffer_Push(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Pop")]
  public static extern int Buffer_Pop(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Reset")]
  public static extern void Buffer_Reset(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_Buffer_Clear")]
  public static extern void Buffer_Clear(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_delete_Buffer")]
  public static extern void delete_Buffer(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_new_REVPlayerUpdateParams")]
  public static extern IntPtr new_REVPlayerUpdateParams();

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Volume_set")]
  public static extern void REVPlayerUpdateParams_Volume_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Volume_get")]
  public static extern float REVPlayerUpdateParams_Volume_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Rpm_set")]
  public static extern void REVPlayerUpdateParams_Rpm_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Rpm_get")]
  public static extern float REVPlayerUpdateParams_Rpm_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Throttle_set")]
  public static extern void REVPlayerUpdateParams_Throttle_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Throttle_get")]
  public static extern float REVPlayerUpdateParams_Throttle_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Gear_set")]
  public static extern void REVPlayerUpdateParams_Gear_set(HandleRef jarg1, int jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Gear_get")]
  public static extern int REVPlayerUpdateParams_Gear_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Velocity_set")]
  public static extern void REVPlayerUpdateParams_Velocity_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Velocity_get")]
  public static extern float REVPlayerUpdateParams_Velocity_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Pitch_set")]
  public static extern void REVPlayerUpdateParams_Pitch_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_Pitch_get")]
  public static extern float REVPlayerUpdateParams_Pitch_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_EnableShifting_set")]
  public static extern void REVPlayerUpdateParams_EnableShifting_set(HandleRef jarg1, bool jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_REVPlayerUpdateParams_EnableShifting_get")]
  public static extern bool REVPlayerUpdateParams_EnableShifting_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_delete_REVPlayerUpdateParams")]
  public static extern void delete_REVPlayerUpdateParams(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_VERSION_set")]
  public static extern void IREVPlayer_VERSION_set(int jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_VERSION_get")]
  public static extern int IREVPlayer_VERSION_get();

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_getMemoryFootprint")]
  public static extern int IREVPlayer_getMemoryFootprint();

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_construct")]
  public static extern IntPtr IREVPlayer_construct(HandleRef jarg1, int jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_LoadData")]
  public static extern void IREVPlayer_LoadData(HandleRef jarg1, HandleRef jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_Rebase")]
  public static extern void IREVPlayer_Rebase(HandleRef jarg1, HandleRef jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_Update")]
  public static extern void IREVPlayer_Update(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_WriteBuffer")]
  public static extern void IREVPlayer_WriteBuffer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_getNumberChannels")]
  public static extern int IREVPlayer_getNumberChannels(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_getSampleRate")]
  public static extern float IREVPlayer_getSampleRate(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_getVisualRPM")]
  public static extern float IREVPlayer_getVisualRPM(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_getLoad")]
  public static extern float IREVPlayer_getLoad(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_getRPMSmoothness")]
  public static extern float IREVPlayer_getRPMSmoothness(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_IREVPlayer_setRPMSmoothness")]
  public static extern void IREVPlayer_setRPMSmoothness(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_delete_IREVPlayer")]
  public static extern void delete_IREVPlayer(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_FixupModel")]
  public static extern bool FixupModel(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_CheckModelHeader")]
  public static extern bool CheckModelHeader(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_GetNumberOfChannels")]
  public static extern int GetNumberOfChannels(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_GetREVPhysicsControlData")]
  public static extern IntPtr GetREVPhysicsControlData(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_KMaxNumberOfGear_get")]
  public static extern int KMaxNumberOfGear_get();

  [DllImport("__Internal", EntryPoint="CSharp_new_VehiclePhysicsControlData")]
  public static extern IntPtr new_VehiclePhysicsControlData();

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_SetGearRatio")]
  public static extern void VehiclePhysicsControlData_SetGearRatio(HandleRef jarg1, int jarg2, float jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_GetGearRatio")]
  public static extern float VehiclePhysicsControlData_GetGearRatio(HandleRef jarg1, int jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_EndianStatus_set")]
  public static extern void VehiclePhysicsControlData_EndianStatus_set(HandleRef jarg1, ushort jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_EndianStatus_get")]
  public static extern ushort VehiclePhysicsControlData_EndianStatus_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_Weight_set")]
  public static extern void VehiclePhysicsControlData_Weight_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_Weight_get")]
  public static extern float VehiclePhysicsControlData_Weight_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_EngineTorque_set")]
  public static extern void VehiclePhysicsControlData_EngineTorque_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_EngineTorque_get")]
  public static extern float VehiclePhysicsControlData_EngineTorque_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_BreakingHorsePower_set")]
  public static extern void VehiclePhysicsControlData_BreakingHorsePower_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_BreakingHorsePower_get")]
  public static extern float VehiclePhysicsControlData_BreakingHorsePower_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_GetDataSize")]
  public static extern int VehiclePhysicsControlData_GetDataSize(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_VehiclePhysicsControlData_FixupEndian")]
  public static extern void VehiclePhysicsControlData_FixupEndian(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_delete_VehiclePhysicsControlData")]
  public static extern void delete_VehiclePhysicsControlData(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_new_PhysicsUpdateParams")]
  public static extern IntPtr new_PhysicsUpdateParams();

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsUpdateParams_Throttle_set")]
  public static extern void PhysicsUpdateParams_Throttle_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsUpdateParams_Throttle_get")]
  public static extern float PhysicsUpdateParams_Throttle_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsUpdateParams_Break_set")]
  public static extern void PhysicsUpdateParams_Break_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsUpdateParams_Break_get")]
  public static extern float PhysicsUpdateParams_Break_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_delete_PhysicsUpdateParams")]
  public static extern void delete_PhysicsUpdateParams(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_new_PhysicsOutputParameters")]
  public static extern IntPtr new_PhysicsOutputParameters();

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsOutputParameters_Rpm_set")]
  public static extern void PhysicsOutputParameters_Rpm_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsOutputParameters_Rpm_get")]
  public static extern float PhysicsOutputParameters_Rpm_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsOutputParameters_Throttle_set")]
  public static extern void PhysicsOutputParameters_Throttle_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsOutputParameters_Throttle_get")]
  public static extern float PhysicsOutputParameters_Throttle_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsOutputParameters_Gear_set")]
  public static extern void PhysicsOutputParameters_Gear_set(HandleRef jarg1, int jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsOutputParameters_Gear_get")]
  public static extern int PhysicsOutputParameters_Gear_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsOutputParameters_Velocity_set")]
  public static extern void PhysicsOutputParameters_Velocity_set(HandleRef jarg1, float jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsOutputParameters_Velocity_get")]
  public static extern float PhysicsOutputParameters_Velocity_get(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_delete_PhysicsOutputParameters")]
  public static extern void delete_PhysicsOutputParameters(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_new_PhysicsSimulator")]
  public static extern IntPtr new_PhysicsSimulator();

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsSimulator_Initialize")]
  public static extern void PhysicsSimulator_Initialize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsSimulator_Update")]
  public static extern IntPtr PhysicsSimulator_Update(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsSimulator_GetControlDataPtr")]
  public static extern IntPtr PhysicsSimulator_GetControlDataPtr(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsSimulator_SetControlData")]
  public static extern void PhysicsSimulator_SetControlData(HandleRef jarg1, HandleRef jarg2);

  [DllImport("__Internal", EntryPoint="CSharp_PhysicsSimulator_Reset")]
  public static extern void PhysicsSimulator_Reset(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_delete_PhysicsSimulator")]
  public static extern void delete_PhysicsSimulator(HandleRef jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_gREVVersion_set")]
  public static extern void gREVVersion_set(string jarg1);

  [DllImport("__Internal", EntryPoint="CSharp_gREVVersion_get")]
  public static extern string gREVVersion_get();
}

}
#endif //UNITY_IPHONE
