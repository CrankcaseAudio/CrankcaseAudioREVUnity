/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CrankcaseAudio.Wrappers {

using System;
using System.Runtime.InteropServices;

public partial class REVPlayerUpdateParams : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal REVPlayerUpdateParams(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(REVPlayerUpdateParams obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~REVPlayerUpdateParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CrankcaseAudioPINVOKE.delete_REVPlayerUpdateParams(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public REVPlayerUpdateParams() : this(CrankcaseAudioPINVOKE.new_REVPlayerUpdateParams(), true) {
  }

  public float Volume {
    set {
      CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Volume_set(swigCPtr, value);
    } 
    get {
      float ret = CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Volume_get(swigCPtr);
      return ret;
    } 
  }

  public float Rpm {
    set {
      CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Rpm_set(swigCPtr, value);
    } 
    get {
      float ret = CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Rpm_get(swigCPtr);
      return ret;
    } 
  }

  public float Throttle {
    set {
      CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Throttle_set(swigCPtr, value);
    } 
    get {
      float ret = CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Throttle_get(swigCPtr);
      return ret;
    } 
  }

  public int Gear {
    set {
      CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Gear_set(swigCPtr, value);
    } 
    get {
      int ret = CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Gear_get(swigCPtr);
      return ret;
    } 
  }

  public float Velocity {
    set {
      CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Velocity_set(swigCPtr, value);
    } 
    get {
      float ret = CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Velocity_get(swigCPtr);
      return ret;
    } 
  }

  public float Pitch {
    set {
      CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Pitch_set(swigCPtr, value);
    } 
    get {
      float ret = CrankcaseAudioPINVOKE.REVPlayerUpdateParams_Pitch_get(swigCPtr);
      return ret;
    } 
  }

  public bool EnableShifting {
    set {
      CrankcaseAudioPINVOKE.REVPlayerUpdateParams_EnableShifting_set(swigCPtr, value);
    } 
    get {
      bool ret = CrankcaseAudioPINVOKE.REVPlayerUpdateParams_EnableShifting_get(swigCPtr);
      return ret;
    } 
  }

}

}
